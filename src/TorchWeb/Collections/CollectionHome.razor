@implements IDisposable
@page "/collections/{Id:int}"

<CascadingValue Value="Socket">
    <section class="collection @ActiveTabClass">
        <Bookmark OnClick="GoToSpecimens">
            <SpecimensIcon />
        </Bookmark>

        @if (SelectedSpecimen != null)
        {
            <section>
                <header>
                    <aside class="back" @onclick=CloseSpecimenDetails>
                        &larr; Back
                    </aside>
                    <h1>
                        <a href="/">Collections</a> &#8250; @Model?.Name &#8250; @SelectedSpecimen.CatalogNumber
                    </h1>
                </header>
                <SpecimenDetail Specimen="SelectedSpecimen" />
            </section>
        }
        else
        {
            <section>
                <header>
                    <h1><a href="/">Collections</a> &#8250; @Model?.Name</h1>
                    @if (User?.IsInRole("admin") == true || User?.IsInRole("supervisor") == true)
                    {
                        <h1 @onclick=Go class="nav-manage-opt">Manage Page</h1>
                    }
                    <h2>Specimens</h2>
                    <button class="deleteCollectionBtn" @onclick=Delete>Delete Collection</button>
                </header>

                <SpecimenList Specimens="TheSpecimens?.Specimens" OnSelect="DisplaySpecimenDetails" />
            </section>
        }

        <Bookmark OnClick="GoToCatalog">
            <Catalog />
        </Bookmark>

        <section>
            <header>
                <h1>Task Catalog</h1>
            </header>
            <TaskCatalog OnTaskAdded="AddTask" />
        </section>

        <Bookmark OnClick="ToggleTaskboard">
            <TaskBoard />
        </Bookmark>

        <section>
            <header>
                <h1>Task Board</h1>
            </header>
            @if (Model != null)
            {
                <WorkflowEdit Collection="Model" />
            }
        </section>

        <Bookmark>
            <Settings />
        </Bookmark>
    </section>
</CascadingValue>


@inject IConfiguration Config
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IRepository<Workflow> Workflows

@code {
    [CascadingParameter] public ClaimsPrincipal? User { get; set; }
    [Parameter] public int Id { get; set; }
    public SocketIOClient.SocketIO Socket { get; set; } = null!;
    string ActiveTab = "specimens";
    bool IsTaskboardActive = true;
    string ActiveTabClass => $"collection-{ActiveTab}{(IsTaskboardActive ? "-taskboard" : "")}";

    Collection? Model;
    List<Specimen>? TheSpecimens;
    Specimen? SelectedSpecimen;

    protected override async Task OnInitializedAsync()
    {
        Socket = new SocketIOClient.SocketIO(Config["Blossom:Authority"]);
        await Socket.ConnectAsync();

        Socket.On("specimen_added", response => RefreshSpecimens());

        Model = await Collections.FindAsync(Id);
        RefreshSpecimens();
    }

    void RefreshSpecimens()
    {
        TheSpecimens = Specimens.Query
               .Where(x => x.CollectionId == Id)
               .OrderByDescending(x => x.CreateDate)
               .Take(50)
               .ToList();

        StateHasChanged();
    }

    void GoToSpecimens() => ActiveTab = "specimens";

    void GoToCatalog() => ActiveTab = "catalog";

    void ToggleTaskboard() => IsTaskboardActive = !IsTaskboardActive;

    void Select(Specimen specimen)
    {
        SelectedSpecimen = specimen;
        IsTaskboardActive = false;
    }

    void DisplaySpecimenDetails(Specimen specimen)
    {
        SelectedSpecimen = specimen;
        IsTaskboardActive = false;
    }

    void CloseSpecimenDetails() => SelectedSpecimen = null;

    async Task AddTask(TorchTask task)
    {
        await Workflows.ExecuteAsync(Model!, x => x.AddTask(task));
        IsTaskboardActive = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        Socket.Dispose();
    }

    async Task Delete()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this collection?");
        if (confirm)
        {
            await Collections.ExecuteAsync(Model, x => x.Delete());
            NavigationManager.NavigateTo("/");
        }
    }

     void Go() => Nav.NavigateTo($"/manage-page/{Id}");
}