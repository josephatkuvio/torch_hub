@implements IDisposable
@page "/collections/{Id:int}"

<CascadingValue Value="Socket">
    <section class="collection @ActiveTabClass">
        <Bookmark OnClick="GoToSpecimens">
            <SpecimensIcon />
        </Bookmark>
        <section>
            <header>
                <h1>Collections &#8250; @Model?.Name</h1>
                <h2>Specimens</h2>
            </header>

            <SpecimenList Specimens="TheSpecimens?.Specimens" />
        </section>

        <Bookmark OnClick="GoToCatalog">
            <Catalog />
        </Bookmark>

        <section>
            <header>
                <h1>Task Catalog</h1>
            </header>
            <TaskCatalog />
        </section>

        <Bookmark OnClick="ToggleTaskboard">
            <TaskBoard />
        </Bookmark>

        <section>
            <header>
                <h1>Task Board</h1>
            </header>
            @if (Model != null)
            {
                <Workflow Collection="Model" />
            }
        </section>
        
        <Bookmark>
            <Settings />
        </Bookmark>
    </section>
</CascadingValue>


@inject IConfiguration Config
@code {
    [Parameter] public int Id { get; set; }
    public SocketIOClient.SocketIO Socket { get; set; } = null!;
    string ActiveTab = "specimens";
    bool IsTaskboardActive; 
    string ActiveTabClass => $"collection-{ActiveTab}{(IsTaskboardActive ? "-taskboard" : "")}";

    CollectionResponse? Model;
    SpecimensResponse? TheSpecimens;

    protected override async Task OnInitializedAsync()
    {
        Socket = new SocketIOClient.SocketIO(Config["Blossom:Authority"]);
        await Socket.ConnectAsync();

        Socket.On("specimen_added", async (response) =>
        {
            Console.WriteLine("got it");
            TheSpecimens = await TorchCommands.GetSpecimensAsync(Id, null, 1, 50);
            StateHasChanged();
        });

        Model = await TorchCommands.GetCollectionAsync(Id);
        TheSpecimens = await TorchCommands.GetSpecimensAsync(Id, null, 1, 50);
    }

    void GoToSpecimens() => ActiveTab = "specimens";
    void GoToCatalog() => ActiveTab = "catalog";
    void ToggleTaskboard() => IsTaskboardActive = !IsTaskboardActive;

    public void Dispose()
    {
        Socket.Dispose();
    }
}
