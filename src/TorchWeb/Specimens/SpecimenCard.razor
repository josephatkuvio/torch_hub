<article class="specimen-card @(IsError ? "error" : "")" @onclick=ViewDetail>
    @if (IsError)
    {
        <ErrorIcon />
    }
    else if (Specimen.CardImage != null)
    {
        <img src="@Specimen.CardImage.Url" alt="@(Specimen.CatalogNumber ?? Specimen.CreateDate.ToString("d"))" />
    }
    else
    {
        <SpecimensIcon />
    }
    <h3>@Specimen.Name</h3>
    <span>@Specimen.BatchId</span>
    <time>@Status.StatusDate.ToString("d")</time>
    <button class="more-btn">...</button>

    @if (Status.TotalTaskCount > 0)
    {
        <div class="progress">
            <progress value="@Status.SuccessCount" max="@Status.TotalTaskCount">
                @((int)((double)Status.SuccessCount / Status.TotalTaskCount * 100))%
            </progress>
            <div>
                <header>@Status.Status</header>
                <aside>
                    <span>Success: @Status.SuccessCount</span>
                    <span>Errored: @Status.ErrorCount</span>
                    <span>Not Yet Processed: @(Status.TotalTaskCount - Status.SuccessCount - Status.ErrorCount)</span>
                </aside>
            </div>
        </div>
    }
    else if (IsError)
    {
        <div class="progress">
            <div>
                <header>@Status.Status</header>
            </div>
        </div>
    }
</article>

@inject IConfiguration Config
@inject IJSRuntime JS
@inject IModalService Modal

@code {
    [Parameter] public Specimen Specimen { get; set; } = null!;
    [CascadingParameter] public SocketIOClient.SocketIO Socket { get; set; } = null!;
    TaskStatus Status = null!;
    bool IsMonitoring;
    bool IsError => Status?.Status.StartsWith("Error") == true;

    record TaskStatus(string Status, DateTime StatusDate, int SuccessCount, int ErrorCount, int TotalTaskCount);
    protected override void OnInitialized()
    {
        Status = new(Specimen.Status ?? "", Specimen.StatusDate ?? Specimen.CreateDate, 0, 0, 0);
    }

    protected override void OnParametersSet()
    {
        if (!IsMonitoring && Socket != null && Specimen.ProcessedDate == null)
        {
            IsMonitoring = true;
            Socket.On($"task_started_{Specimen.Id}", async (response) => await UpdateStatus(response));
            Socket.On($"task_completed_{Specimen.Id}", async (response) => await UpdateStatus(response));
            Socket.On($"specimen_processed_{Specimen.Id}", async (response) => await UpdateStatus(response));
        }
    }

    async Task ViewDetail()
    {
        var parameters = new ModalParameters();
        parameters.Add("Specimen", Specimen);
        var options = new ModalOptions();
        options.Size = ModalSize.Automatic;

        var modal = Modal.Show<SpecimenDetail>(Specimen.Name, parameters, options);
        await modal.Result;
    }

    async Task UpdateStatus(SocketIOClient.SocketIOResponse response)
    {
        Status = response.GetValue<TaskStatus>(0);
        await InvokeAsync(StateHasChanged);
    }

    //void Go() => Nav.NavigateTo($"/collections/{Specimen}/{Specimen.Id}");

    async Task Delete()
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this specimen?");
        if (confirm)
        {
            await Specimens.ExecuteAsync(Specimen, x => x.Delete());
        }
    }
}
