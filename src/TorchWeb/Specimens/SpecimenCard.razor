<article class="specimen-card @(Specimen.Status?.StartsWith("Error") == true ? "error" : "")">
    <header>
        @if (Specimen.CardImage != null)
        {
            <img src="@Specimen.CardImage?.AbsoluteUrl(Config["Blossom:Authority"])" alt="@(Specimen.CatalogNumber ?? Specimen.CreateDate.ToString("d"))" />
        }
        else
        {
            <SpecimensIcon />
        }
        <h3>@Specimen.Name</h3>
    </header>
    <div class="right">
        <span>@Specimen.Status</span>
        <time>@((Specimen.StatusDate ?? Specimen.CreateDate).ToString("d"))</time>
        <button class="more-btn">...</button>
    </div>
</article>

@inject IConfiguration Config
@inject IJSRuntime JS

@code {
    [Parameter] public Specimen Specimen { get; set; } = null!;
    [CascadingParameter] public SocketIOClient.SocketIO Socket { get; set; } = null!;
    string? CatalogNumber;
    DateTime? CreateDate;
    string? Status;

    protected override void OnInitialized()
    {
        CatalogNumber = Specimen.CatalogNumber;
        CreateDate = Specimen.CreateDate;

        //Socket.On($"specimen_updated_{Specimen.Id}", (response) =>
        //{
        //    CatalogNumber = response.GetValue<string>(0);
        //    CreateDate = response.GetValue<DateTime>(0);
        //    Status = response.GetValue<string>(1);
        //    StateHasChanged();
        //});
    }

    //void Go() => Nav.NavigateTo($"/collections/{Specimen}/{Specimen.Id}");

    async Task Delete()
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this specimen?");
        if (confirm)
        {
            await Specimens.ExecuteAsync(Specimen, x => x.Delete());
        }
    }
}
