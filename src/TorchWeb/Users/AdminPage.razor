@page "/admin-page"

<div class="admin-div">
    <header>
        <aside class="back">
            <a href="/">&larr; Home</a>
        </aside>
        <h1 class="page-name">Admin Page</h1>
        <h1>@InstitutionName - @InstitutionCode</h1>
    </header>

    <div class="container">
        <div class="container-top">
            <div class="left">
                <h2>Users List</h2>
            </div>
            <div class="right">
                <button @onclick="OpenInviteModal">Invite Member</button>
            </div>
        </div>
        <div class="container-body">
            @if (AllUsers != null)
            {
                <table>

                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th></th>
                    </tr>
                    @foreach (var user in AllUsers)
                    {
                        <tr>
                            <td>@user.User.FirstName @user.User.LastName</td>
                            <td>@user.User.Email</td>
                            <td class="btn"><button @onclick="() => RemoveUser(user.UserId)">Remove Member</button></td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>




@inject IModalService Modal
@inject IJSRuntime JSRuntime
@code {
    [CascadingParameter] public User User { get; set; } = null!;
    IEnumerable<WorkflowUser>? AllUsers;
    public string? InstitutionName { get; set; }
    public string? InstitutionCode { get; set; }

    protected override void OnInitialized()
    {
        LoadUsers();
    }

    void LoadUsers()
    {
        AllUsers = Users.Query.Where(x => x.WorkflowUsers.Any(y => y.WorkflowId == User!.CurrentWorkflowId)).SelectMany(x => x.WorkflowUsers);
    }

    async Task OpenInviteModal()
    {
        var modal = Modal.Show<InviteUser>();
        await modal.Result;
    }

    async Task RemoveUser(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this user from this institution?");
        if (confirm)
            await Users.ExecuteAsync(id, x => x.SetCurrentWorkflow(null));

        LoadUsers();
    }
}