@page "/admin-page"


<div class="admin-div">
    <header>
        <aside class="back">
            <a href="/">&larr; Home</a>
        </aside>
        <h1 class="page-name">Admin Page</h1>
        <h1>@Model?.Name - @Model?.Code</h1>
    </header>

    <div class="container">
        <div class="container-top">
            <div class="left">
                <h2>Users List</h2>
            </div>
            <div class="right">
                <button @onclick="OpenInviteModal">Invite User</button>
            </div>
        </div>
        <div class="container-body">
            <table>
                @if (Users != null)
                {
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th></th>
                    </tr>
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>@user.Role</td>
                            <td><button @onclick="() => RemoveUser(user.Id)">Remove User</button></td>
                        </tr>
                    }
                }
            </table>
        </div>
    </div>

</div>



@inject IModalService Modal
@inject IJSRuntime JSRuntime
@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int InstitutionId { get; set; }

    InstitutionResponse? Model;
    UserResponse? User;
    UsersResponse? Users;


    protected override async Task OnInitializedAsync()
    {
        //var userInfo = await TorchCommands.GetUserInfoAsync();
        //var userId = int.Parse(userInfo);

        User = await TorchCommands.GetUserAsync(UserId.ToString());
        //User = await TorchCommands.GetUserAsync(userId.ToString());
        Model = await TorchCommands.GetInstitutionAsync(InstitutionId);
        Users = await TorchCommands.GetUsersAsync();
    }

    async Task OpenInviteModal()
    {
        var modal = Modal.Show<InviteUser>();
        await modal.Result;
        //Users = await TorchCommands.GetUsersAsync(InstitutionId);
    }

    async Task RemoveUser()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this user from this institution?");
        if (confirm)
            await TorchCommands.RemoveUserAsync(User.Id);
    }
}
