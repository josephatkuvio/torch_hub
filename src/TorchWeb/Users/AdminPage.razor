@page "/admin-page"

@if (User?.IsInRole("admin") == true)
{
    <div class="admin-div">
        <header>
            <aside class="back">
                <a href="/">&larr; Home</a>
            </aside>
            <h1 class="page-name">Admin Page</h1>
        </header>

        <div class="container">
            <div class="container-top">
                <div class="left">
                    <h2>Users List</h2>
                </div>
                <div class="right">
                    <button @onclick="OpenInviteModal">Invite Member</button>
                </div>
            </div>
            <div class="container-body">
                <table>
                    @if (Users != null)
                    {
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th></th>
                        </tr>
                        @foreach (var user in Users.Users)
                        {
                            <tr>
                                <td>@user.First_name @user.Last_name</td>
                                <td>@user.Email</td>
                                <td>@user.Roles.FirstOrDefault()</td>
                                <td class="btn"><button @onclick="() => RemoveUser(user.Id)">Remove Member</button></td>
                            </tr>
                        }
                    }
                </table>
            </div>
        </div>
    </div>
}

<div class="admin-div">
    <header>
        <aside class="back">
            <a href="/">&larr; Home</a>
        </aside>
        <h1 class="page-name">Admin Page</h1>
        <h1>BRIT - BRIT</h1>
    </header>

    <div class="container">
        <div class="container-top">
            <div class="left">
                <h2>Users List</h2>
            </div>
            <div class="right">
                <button @onclick="OpenInviteModal">Invite Member</button>
            </div>
        </div>
        <div class="container-body">
            <table>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th></th>
                </tr>
                @foreach (var item in items)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Email</td>
                        <td>@item.Role</td>
                        <td class="btn"><button onclick="@(() => RemoveItem(item))">Remove Member</button></td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>


@inject IModalService Modal
@inject IJSRuntime JSRuntime
@code {
    [Parameter] public int UserId { get; set; }
    [CascadingParameter] public ClaimsPrincipal? User { get; set; }
    UsersResponse? Users;

    protected override async Task OnInitializedAsync()
    {
        Users = await TorchCommands.GetUsersAsync();
    }

    async Task OpenInviteModal()
    {
        var modal = Modal.Show<InviteUser>();
        await modal.Result;
    }

    async Task RemoveUser(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this user from this institution?");
        if (confirm)
            await TorchCommands.RemoveUserAsync(id);
    }

    public class Item
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }

    private List<Item> items = new List<Item>();

    protected override void OnInitialized()
    {
        items.Add(new Item { Name = "Jason Best", Email = "jbest@brit.org", Role = "admin" });
        items.Add(new Item { Name = "Diego Barroso", Email = "dbarroso@brit.org", Role = "admin" });
    }

    private async Task RemoveItem(string itemId)
    {
        await JSRuntime.InvokeVoidAsync("removeRow", itemId);
    }

    async Task RemoveItem(Item item)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this member from this institution?");
            if (confirm)
            items.Remove(item);
    }
}
