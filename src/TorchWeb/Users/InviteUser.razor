@inherits SparcModal

<div class="add-collection">
    <p>
        Invite new team member
    </p>

    <label>
        Member Email
        <input @bind=Request.Email />
    </label>

    <label>
        Member Role
        <select @bind="@Request.Roles">             
            @if (User?.IsInRole("admin") == true)
            {
                @foreach (var role in Roles.Roles)
                {
                    <option value="@role.Id">@role.Name</option>
                }
            }
            else if (User?.IsInRole("supervisor") == true)
            {
                var basicRole = Roles.Roles.FirstOrDefault(r => r.Name == "basic");
                if (basicRole != null)
                {
                    <option value="@basicRole.Id">@basicRole.Name</option>
                }
            }
        </select>
    </label>

    <button @onclick=Send>Send invite</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
</div>

@code {
    [CascadingParameter] public ClaimsPrincipal? User { get; set; }
    RolesResponse? Roles;
    SendInviteRequest Request = new SendInviteRequest(); 
    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        Roles = await TorchCommands.GetRolesAsync();
    }

    //async Task Send()
    //{
    //    await TorchCommands.SendInviteAsync(Request);
    //    await Ok();
    //}


    async Task Send()
    {
        object responseObj = await TorchCommands.SendInviteAsync(Request);
        HttpResponseMessage response = (HttpResponseMessage)responseObj;

        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
        else
        {
            string token = await response.Content.ReadAsStringAsync();
            string registrationUrl = $"/register-user?token={token}";
            Nav.NavigateTo(registrationUrl);
            await Ok();
        }
    }
}