@using Newtonsoft.Json.Linq;
<section class="task-list">
    <section>
        <header>
            <h1>@Workflow.Name</h1>
            <div>
                <h4>Last Updated: @(Workflow.Tasks.Any() ? Workflow.Tasks.Max(x => x.LastUpdatedDate) : "Never")</h4>
                <h4>Created by: @Workflow.Institution?.Owner?.FirstName</h4>
                <h4>Assigned Tasks: @Workflow.Tasks.Count()</h4>
            </div>
        </header>

        <section class="workflow-cards">
            @foreach (var task in Workflow.Tasks.OrderBy(x => x.SortOrder))
            {
                <TaskCard Task="task" OnDelete="Delete" OnReorder="Reorder" />
            }
        </section>
    </section>

    <div class="new-border"></div>

    <section>
        <label class="search-box">
            <input type="text" placeholder="Search" />
            <i class="fa fa-search"></i>
        </label>

        <section class="task-catalog">
            @foreach (var task in FilteredCatalog)
            {
                <article class="new-task" @onclick="@(() => Add(task))">
                    <h3>@task.Name</h3>
                    <button>
                        <img src="/images/plusNewIcon.svg" />
                    </button>
                </article>
            }
        </section>
    </section>

</section>




@code {
    [Parameter] public Workflow Workflow { get; set; } = null!;
    ICollection<Torch.Api.CatalogTask> Catalog = new List<Torch.Api.CatalogTask>();

    string searchText = "";
    IEnumerable<Torch.Api.CatalogTask> FilteredCatalog => Catalog.Where(x =>
        string.IsNullOrWhiteSpace(searchText)
        || x.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        .OrderBy(x => x.Name);

    protected override async Task OnInitializedAsync()
    {
        Catalog = await TorchApi.GetAllTasksAsync();
    }

    async Task Add(Torch.Api.CatalogTask task)
    {
        var parameters = JObject.FromObject(task.Parameters).ToObject<Dictionary<string, string>>();
        Workflow.AddTask(task.Func_name, task.Name, parameters);
        await Workflows.UpdateAsync(Workflow);
    }

    async Task Delete(TorchTask task)
    {
        Workflow.DeleteTask(task);
        await Workflows.UpdateAsync(Workflow);
    }

    async Task Reorder(TorchTask task)
    {
        Workflow.UpdateTaskSortOrders();
        await Workflows.UpdateAsync(Workflow);
    }
}
