<section class="workflow @(IsEditing ? "editing" : "")">
    <section>
        <header>
            <h2>Progress</h2>
        </header>
        <div class="progress">
            <img src="/images/ellipse196.png" alt="" />
            <div class="inside-circle">
                <img src="/images/ellipse194.png" alt="" />
                <p>60%</p>            @*show task progress percentage here*@
            </div>
        </div>
    </section>

    <section>
        <header>
            <h2>Tasks</h2>
        </header>
        <ul>
            @foreach (var task in Tasks)
            {
                <li>
                    <TaskCard Task="task" OnDelete="RemoveTask" />
                </li>
            }
        </ul>
        @if (!Tasks.Any())
        {
            <p>You haven't yet added any tasks to this workflow. Click the Edit button to browse the Task Catalog and set up your workflow.</p>
        }
    </section>

    <button @onclick=SelectFiles>Upload</button>
    <input type="file" name="file" @ref=FilePicker multiple hidden @onchange="Upload" />
</section>

@inject IModalService Modal
@inject IConfiguration Config
@inject IJSRuntime JS
@code {
    [Parameter] public CollectionResponse Collection { get; set; } = null!;
    List<TorchTask> Tasks = new();
    bool IsEditing;
    bool IsSelected;
    ElementReference FilePicker;

    protected override void OnInitialized()
    {
        if (Collection.Tasks != null)
            Tasks = Collection.Tasks.ToList();
    }

    async Task RemoveTask(TorchTask task)
    {
        Tasks.Remove(task);
        await SaveAsync();
    }

    string UploadUrl => $"{Config["Blossom:Authority"]}/collections/{Collection.Id}/specimens";
    async Task SelectFiles()
    {
        await JS.InvokeVoidAsync("triggerClick", FilePicker);
    }

    async Task Upload()
    {
        await JS.InvokeVoidAsync("upload", FilePicker, UploadUrl);
    }

    async Task SaveAsync()
    {
        var workflow = new TorchTasksResponse
        {
            Tasks = Tasks
        };
        await TorchCommands.UpdateWorkflowAsync(Collection.Id, workflow);

    }

    void ToggleEdit() => IsEditing = !IsEditing;
}
