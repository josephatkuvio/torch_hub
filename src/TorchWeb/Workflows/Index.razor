@attribute [Authorize]
@page "/"
@page "/Workflows/{WorkflowId:int}"
@using Torch.Web.Tasks
@using Torch.Web.Pages


<section class="new-ui-section @(summaryCollapsed ? "collapsed" : "")">
    <section class="tab-section">
        <div class="tab-and-select">
            <ul class="tab-list">
                <li class="tab-item first-icon @(activeTab == "workflow" ? "active" : "")" @onclick='() => ChangeTab("workflow")'>
                    <a class='tab-link'>
                        <img src="/images/Flowchart.svg" />
                    </a>
                </li>
                <li class="tab-item @(activeTab == "tasks" ? "active" : "")" @onclick='() => ChangeTab("tasks")'>
                    <a class='tab-link'>
                        <img src="/images/ProgressIcon.svg" />
                    </a>
                </li>
                <li class="tab-item @(activeTab == "settings" ? "active" : "")" @onclick='() => ChangeTab("settings")'>
                    <a class='tab-link'>
                        <img src="/images/ManageIcon.svg" />
                    </a>
                </li>
            </ul>

            @if (CurrentWorkflow != null)
            {
                <WorkflowSwitcher SelectedWorkflow=CurrentWorkflow SelectedWorkflowIdChanged="HandleSelectedWorkflowChange" />
            }
            <Logout />
        </div>

        @if (CurrentWorkflow != null)
        {
            <section class="tab-content">
                @if (activeTab == "workflow")
                {
                    <WorkflowDetail Workflow="CurrentWorkflow" OnUpload="Upload" />
                }
                else if (activeTab == "tasks")
                {
                    <TaskList Workflow="CurrentWorkflow" />
                }
                else if (activeTab == "settings" && !showDetail)
                {
                    <NewUIManageWorkflow OnContentClick="ToggleShowDetail" />
                }
                else if (activeTab == "settings" && showDetail)
                {
                    <NewUIWorkflowDetail OnBackClick="ToggleShowDetail" />
                }
            </section>
        }
    </section>

    <section class="tab-section summary-section">
        <ul class="tab-list">
            <li class="tab-item summary active" @onclick="ToggleSummary">
                <a class="tab-link" name="summary">
                    <img src="/images/summaryIcon.svg" />
                </a>
            </li>
        </ul>
        @if (CurrentWorkflow != null && Socket?.Connected == true)
        {
            <CascadingValue Value="Socket">
                <section class="tab-content collapsed-summary-tab-content">
                    @if (!summaryCollapsed)
                    {
                        <WorkflowSummary @ref=SummaryComponent Workflow="CurrentWorkflow" />
                    }
                    else
                    {
                        <NewUICollapsedSummary />
                    }
                </section>
            </CascadingValue>
        }
    </section>

</section>

@inject IConfiguration Config
@code {
    [CascadingParameter] public User User { get; set; } = null!;
    [Parameter] public int? WorkflowId { get; set; }

    Workflow? CurrentWorkflow;
    WorkflowSummary? SummaryComponent;
    public SocketIOClient.SocketIO Socket { get; set; } = null!;

    private string activeTab = "workflow";
    private bool showDetail = false;
    private bool summaryCollapsed = false;

    protected override async Task OnInitializedAsync()
    {
        WorkflowId ??= User.CurrentWorkflowId;

        if (CurrentWorkflow == null && WorkflowId != null)
            CurrentWorkflow = await Workflows.FindAsync(WorkflowId);

        User.SetCurrentWorkflow(CurrentWorkflow!);
        Socket = new SocketIOClient.SocketIO(Config["Blossom:Authority"], new SocketIOClient.SocketIOOptions
        {
            Path = "/ws/socket.io"
        });
        await Socket.ConnectAsync();
    }

    private void HandleSelectedWorkflowChange(int newWorkflowId)
    {
        Nav.NavigateTo($"/Workflows/{newWorkflowId}", true);
    }

    private async Task Upload(InputFileChangeEventArgs e) => await SummaryComponent!.Upload(e);

    private void ChangeTab(string tabName)
    {
        activeTab = tabName;
    }

    private void ToggleShowDetail()
    {
        showDetail = !showDetail;
    }

    private void ToggleSummary()
    {
        summaryCollapsed = !summaryCollapsed;
    }
}
