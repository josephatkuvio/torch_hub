@using Torch.Web.Workflows.Connections
<header class="manage-workflow-header">
    <div class="header-left">
        <h1>Manage Workflow</h1>
    </div>
    <div class="header-right">
        <button class="sort-button">New</button>
        <img class="sort-icon-img" src="/images/plusNewIcon.svg" />
        <button class="sort-button">Sort</button>
        <img class="sort-icon-img" src="/images/sortIcon.svg" />
        <div class="search-box">
            <input type="text" placeholder="Search" />
            <i class="fa fa-search"></i>
        </div>
        <i class="sort"></i>
    </div>
</header>

<section class="manage-workflow-folders">
    @if (SelectedConnection == null)
    {
        <section class="workflow-cards">

            @foreach (var connection in Workflow.Connections.OrderBy(x => x.Direction))
            {
                <div class="connect-card-manage">
                    <ConnectionCard Connection="connection" OnClick=Go ShowUploadButton="false" />
                </div>
            }
            @if (!Workflow.Connections.Any())
            {
                <aside>
                    No connections found. Add connections to manage your workflow.
                </aside>
            }
        </section>

        <section class="workflow-users">
            <h2>Workflow Users</h2>
            <ul>
                @foreach (var workflowUser in Workflow.Users)
                {
                    <li>@workflowUser.User.FirstName @workflowUser.User.LastName - @workflowUser.User.Email</li>
                }
            </ul>
        </section>
    }
    else
    {
        <ManageWorkflowDetail SelectedConnection="SelectedConnection" OnDetailBackClick="HandleBackClick" />
    }
</section>

@code {
    [Parameter] public User User { get; set; } = null!;
    Connection? SelectedConnection;

    [Parameter] public Workflow Workflow { get; set; } = null!;

    async Task Go(Connection connection)
    {
        SelectedConnection = connection;
    }

    private async Task HandleBackClick()
    {
        SelectedConnection = null;
    }
}