<article class="task task-@(TaskRun?.Status) @(IsSelected ? "selected" : "")" @onclick=Select>
    <header>
        <img src="/images/ellipse186.png" alt="" />
        <h4>@Task.Name</h4>
        @*<aside>@RunState</aside>*@
    </header>

    @if (DisplayParameters.Any())
    {
        <dl>
            @foreach (var parameter in DisplayParameters)
            {
                <dt>@parameter.Key</dt>
                <dd title="@parameter.Value">@parameter.Value</dd>
            }
        </dl>
    }

    @if (OnDelete.HasDelegate)
    {
        <button class="secondary" @onclick="Delete">Delete</button>
    }

    @if (TaskRun != null)
    {
        <footer>
            @if (Derivatives != null)
            {
                <div class="images">
                    @foreach (var img in Derivatives.Where(x => x != null))
                    {
                        <figure @onclick="@(() => SelectImage(img!.size))">
                            <img src="@img!.url" alt="@img.size" />
                            <figcaption>
                                @img.size (@img.width x @img.height)
                            </figcaption>
                        </figure>
                    }
                </div>
            }
            else if (TaskRun.Result != null)
            {
                <dl class="results">
                    @foreach (var item in TaskRun.Result.RootElement.EnumerateObject())
                    {
                        <dt>@item.Name</dt>
                        @if (item.Value.ToString()?.StartsWith("http") == true)
                        {
                            <dd>
                                <a href="@item.Value.ToString()" target="_blank">@item.Value</a>
                            </dd>
                        }
                        else
                        {
                            <dd>
                                @item.Value
                            </dd>
                        }
                    }
                </dl>
            }
            else
            {
                <aside>@TaskRun?.Result</aside>
            }
        </footer>
    }
</article>

@code {
    [Parameter] public TorchTask Task { get; set; } = null!;
    [Parameter] public TorchTaskRun? TaskRun { get; set; }
    [Parameter] public EventCallback<TorchTask> OnAdd { get; set; }
    [Parameter] public EventCallback<TorchTask> OnDelete { get; set; }
    [CascadingParameter] public SocketIOClient.SocketIO Socket { get; set; } = null!;
    record Derivative(string url, string size, int width, int height);
    bool IsSelected;

    protected override void OnInitialized()
    {
        if (TaskRun != null)
        {
            Socket.On(Task.FuncName, (response) =>
            {
                TaskRun = response.GetValue<TorchTaskRun>(1);
                StateHasChanged();
            });
        }
    }

    List<Derivative?>? Derivatives => TaskRun?.To<Derivative>("Generate Derivatives");

    Dictionary<string, string> DisplayParameters => Task.Parameters
        .Where(x => x.Value != null && x.Value.ToString() != "None")
        .ToDictionary(x => x.Key, x => x.Value);

    async Task Add() => await OnAdd.InvokeAsync(Task);

    async Task Delete() => await OnDelete.InvokeAsync(Task);

    void Select() => IsSelected = !IsSelected;
    void SelectImage(object img) => Console.WriteLine(img);
}