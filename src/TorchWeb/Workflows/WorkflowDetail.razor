@using Torch.Web.Workflows.Connections
    <header>
        <h1>@Workflow.Name</h1>
        <div class="header-right">
            <button class="sort-button">Sort</button>
            <img class="sort-icon-img" src="/images/sortIcon.svg" />
            <div class="search-box">
                <input type="text" placeholder="Search" />
                <i class="fa fa-search"></i>
            </div>
            <i class="sort"></i>
        </div>
    </header>

<hr />
 
@if (ActiveFolder == null)
{
    <section>
        <h2>Connections</h2>
        <section class="workflow-cards">
            @foreach (var connection in Workflow.Connections.OrderBy(x => x.Direction))
            {
                <ConnectionCard Connection="connection" OnUpload="Upload" OnClick=Go />
            }
            @if (!Workflow.Connections.Any())
            {
                <aside>
                    No connections found for this workflow. Create your first connection in the Settings tab (third tab).
                </aside>
            }
        </section>
    </section>

    <hr />

    <section class="specimens-list-cards">
        <h2>Recent Specimens</h2>
        <section class="spec-cards">
            @foreach (var specimen in RecentSpecimens)
            {
                <SpecimenCard Specimen="specimen" />
            }
        </section>
    </section>
}
else
{
    <section class="specimens-list-cards full">
        <button @onclick="Back">Back</button>
        <h2>@ActiveFolder.Name | @ActiveFolder.Direction</h2>
        <section class="spec-cards">
            @foreach (var specimen in AllSpecimens)
            {
                <SpecimenCard Specimen="specimen" />
            }
        </section>
    </section>
}

@inject IConfiguration Config
@code {
    [Parameter] public Workflow Workflow { get; set; } = null!;
    [Parameter] public EventCallback<InputFileChangeEventArgs> OnUpload { get; set; }
    List<Specimen> RecentSpecimens = new();
    IEnumerable<Specimen> AllSpecimens = new List<Specimen>();
    Connection? ActiveFolder;

    protected override async Task OnInitializedAsync()
    {
        RecentSpecimens = Specimens.Query
            .Where(x => x.InputConnection.WorkflowId == Workflow.Id)
            .OrderByDescending(x => x.CreateDate)
            .Take(10)
            .ToList();

        // Socket.On("specimen_added", response => RefreshSpecimens());
    }

    async Task Go(Connection connection)
    {
        ActiveFolder = connection;
        AllSpecimens = await connection.GetAsync(100);
    }

    void Back()
    {
        ActiveFolder = null;
    }

    async Task Upload(InputFileChangeEventArgs e) => await OnUpload.InvokeAsync(e);
}