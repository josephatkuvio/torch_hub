@using Torch.Web.Workflows.Connections
<header>
    <h1>@Workflow.Name</h1>
    <div class="header-right">
        <button class="sort-button">Sort</button>
        <img class="sort-icon-img" src="/images/sortIcon.svg" />
        <div class="search-box">
            <input type="text" placeholder="Search" />
            <i class="fa fa-search"></i>
        </div>
        <i class="sort"></i>
    </div>
</header>

<hr />

@if (ActiveBatch == null)
{
    <section>
        <h2>Recent Batches</h2>
        <section class="workflow-cards">
            @foreach (var batch in RecentBatches)
            {
                <BatchCard Batch="batch" OnClick=Go />
            }
            @if (!RecentBatches.Any())
            {
                <aside>
                    No recent batches found for this workflow. Upload specimens to start your first batch.
                </aside>
            }
        </section>
    </section>

    <hr />

    <section class="specimens-list-cards">
        <header>
            <h2>Recent Specimens</h2>
        </header>
        <section class="spec-cards">
            @foreach (var specimen in RecentSpecimens)
            {
                <SpecimenCard Specimen="specimen" RetryFromSpecimenCard="Retry" />
            }
            @if (!RecentSpecimens.Any())
            {
                <aside>
                    No recently processed specimens found for this workflow. Upload specimens to start your first batch.
                </aside>
            }
        </section>
    </section>
}
else
{
    <section class="specimens-list-cards full">
        <header>
            <button @onclick="Back">Back</button>
            <h2>@ActiveBatch.Id | @ActiveBatch.CreateDate.ToString("dd MMM yyyy")</h2>
        </header>
        <section class="spec-cards">
            @foreach (var specimen in AllSpecimens)
            {
                <SpecimenCard Specimen="specimen" RetryFromWorkflow="Retry" />
            }
        </section>
    </section>
}

@inject IConfiguration Config
@code {
    [Parameter] public Workflow Workflow { get; set; } = null!;
    [Parameter] public EventCallback<Batch> OnBatchSelect { get; set; }
    [Parameter] public EventCallback<Specimen> RetryFromWorkflowDetail { get; set; }
    List<Specimen> RecentSpecimens = new();
    List<Batch> RecentBatches = new();
    IEnumerable<Specimen> AllSpecimens = new List<Specimen>();
    Batch? ActiveBatch;

    protected override void OnInitialized()
    {
        RecentBatches = Specimens.Query
            .Where(x => x.InputConnection.WorkflowId == Workflow.Id)
            .GroupBy(x => x.BatchId)
            .Select(x => new
            {
                x.Key,
                CreateDate = x.Max(y => y.CreateDate),
                Count = x.Count()
            })
            .OrderByDescending(x => x.CreateDate)
            .Take(6)
            .ToList()
            .Select(x => new Batch(x.Key, x.CreateDate, x.Count))
            .ToList();

        RecentSpecimens = Specimens.Query
            .Where(x => x.InputConnection.WorkflowId == Workflow.Id)
            .OrderByDescending(x => x.CreateDate)
            .Take(10)
            .ToList();
    }

    public async Task Go(Batch batch)
    {
        ActiveBatch = batch;
        AllSpecimens = Specimens.Query
            .Where(x => x.InputConnection.WorkflowId == Workflow.Id && x.BatchId == batch.Id)
            .OrderByDescending(x => x.CreateDate)
            .Take(100)
            .ToList();

        await OnBatchSelect.InvokeAsync(ActiveBatch);
    }

    async Task Back()
    {
        ActiveBatch = null;
        await OnBatchSelect.InvokeAsync(null);
    }

    private async Task Retry(Specimen specimen)
    {
        await RetryFromWorkflowDetail.InvokeAsync(specimen);
    }
}