<header class="workflow-header">
    <h1>Summary</h1>
</header>

<div class="divider"></div>

<section class="workflow-folders">
    <h2>Processing</h2>
    <section class="processing-cards">

        <div class="nested-progress-bars">
            <CircleProgressBar UploadPercentage="@UploadPercentage" ProcessPercentage="@ProcessPercentage" TransferPercentage="@TransferPercentage" />
        </div>

        <div class="text-info">
            <div class="prog-data">
                <div class="status-board-text completion">
                    <h4>Completion</h4>
                    <h1>@CompletionPercentage.ToString("N0")<span>%</span></h1>
                </div>
                <div class="status-board-text">
                    <h4>Time Remaining</h4>
                    <h1>@HoursLeft<span>hr</span>@MinutesLeft<span>min</span></h1>
                </div>
            </div>
            <div class="progress-bar-caption">
                <div class="progress-item">
                    <div class="color-caption-circle uploading-circle"></div>
                    <h4 class="title-caption">Uploaded</h4>
                    <h4>@UploadCount</h4>
                </div>
                <div class="progress-item">
                    <div class="color-caption-circle success-circle"></div>
                    <h4 class="title-caption">Processed</h4>
                    <h4>@ProcessCount</h4>
                </div>
                <div class="progress-item">
                    <div class="color-caption-circle error-circle"></div>
                    <h4 class="title-caption">Transferred</h4>
                    <h4>@TransferCount</h4>
                </div>
            </div>
        </div>

    </section>
</section>


<div class="divider"></div>

<section class="workflow-list-cards">
    <h2>Queue</h2>
    @if (Workflow.InputConnection != null)
    {
        <section class="w-list-cards">
            @foreach (var specimen in SpecimenQueue.Where(x => x.Status != "Uploaded"))
            {
                <SpecimenCard Specimen="specimen" />
            }
        </section>
    }
</section>


@code {
    [Parameter] public Workflow Workflow { get; set; } = null!;
    [CascadingParameter] public SocketIOClient.SocketIO Socket { get; set; } = null!;

    int UploadCount;
    int ProcessCount;
    int TransferCount;

    int UploadPercentage => UploadCount == 0 ? 0 : (int)(100 * (double)UploadCount / (UploadCount + SpecimenQueue.Count(x => x.Status != "Uploaded")));
    int ProcessPercentage => UploadCount == 0 ? 0 : (int)(100 * (double)ProcessCount / UploadCount);
    int TransferPercentage => UploadCount == 0 ? 0 : (int)(100 * (double)TransferCount / UploadCount);

    double CompletionPercentage => (UploadPercentage / 3.0) + (ProcessPercentage / 3.0) + (TransferPercentage / 3.0);

    int HoursLeft => 1;
    int MinutesLeft => 30;
    string BatchId = Guid.NewGuid().ToString();
    List<Specimen> SpecimenQueue = new();

    protected override async Task OnInitializedAsync()
    {
        await Socket.EmitAsync("monitor_workflow", Workflow.Id);

        Socket.On("specimen_processed", async (data) =>
        {
            ProcessCount++;
            await InvokeAsync(StateHasChanged);
        });
    }

    protected override void OnParametersSet()
    {
        RefreshCounts();
    }

    void RefreshCounts()
    {
        var query = Specimens.Query
            .Where(x => x.InputConnectionId == Workflow.InputConnection!.Id)
            .GroupBy(x => x.InputConnectionId)
            .Select(x => new
            {
                UploadCount = x.Count(),
                ProcessCount = x.Count(y => y.ProcessedDate != null),
                TransferCount = x.Count(y => y.ProcessedDate != null && y.OutputConnectionId != null)
            });

        UploadCount = query.FirstOrDefault()?.UploadCount ?? 0;
        ProcessCount = query.FirstOrDefault()?.ProcessCount ?? 0;
        TransferCount = query.FirstOrDefault()?.TransferCount ?? 0;
    }

    public async Task Upload(InputFileChangeEventArgs e)
    {
        if (Workflow?.InputConnection == null)
            return;

        foreach (var file in e.GetMultipleFiles(10000))
        {
            SpecimenQueue.Add(new Specimen(Workflow.InputConnection.Id, BatchId, file));
        }

        StateHasChanged();

        foreach (var specimen in SpecimenQueue)
        {
            await Workflow.InputConnection.UploadAsync(specimen, specimen.File!.OpenReadStream(2_000_000_000));
            await Workflows.UpdateAsync(Workflow);
            UploadCount++;
            StateHasChanged();
        }

        await TorchApi.StartWorkflowAsync(Workflow.Id, BatchId);

        BatchId = Guid.NewGuid().ToString();
        SpecimenQueue.Clear();
    }
}